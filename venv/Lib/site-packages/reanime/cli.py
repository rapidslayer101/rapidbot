from __future__ import print_function, unicode_literals
import click
from configparser import ConfigParser 
import regex
import argparse
from pyfiglet import Figlet
from prettytable import PrettyTable
from pprint import pprint
from PyInquirer import style_from_dict, Token, prompt
from PyInquirer import Validator, ValidationError
import os
import requests
from pathlib import Path
from . import gogoanime
from . import gogoplay
from . import gogostream
from .gogoanime import (data, episodeno, data, downloader,genre)
from .gogoplay import (data, episodeno, data, downloader,genre)
from .gogostream import (data, episodeno, data, downloader,genre)

server={1:gogoanime,2:gogoplay,3:gogostream}

def validateurl(url):
	global service
	if (("https://gogoanime" in url) and ("/category/" in url)) or (("https://gogoanime" in url) and ("-episode-" in url)):
		service=1
		if ("/category/" in url):
			return 1
		else:
			return 0
	elif ("https://gogo-play" in url) and ("-episode-" in url):
		service=2
		return 1
	elif ("https://gogo-stream" in url) and ("-episode-" in url):
		service=3
		return 1
	else:
		exit("Please Enter the correct url which is from https://gogoanime.tv")

def down_dir(directory):
	if directory=="":
		download_dir=str(os.path.join(Path.home(), "Downloads"))
		download_dir=os.path.normpath(download_dir)
	else:
		download_dir=directory
		download_dir=os.path.normpath(download_dir)
		if not os.path.exists(download_dir):
			print("Path doesnot exists")
			exit()
	return download_dir

def parse():
	global service
	global downdir
	loc=click.get_app_dir('reanime')
	if not os.path.exists(loc):
		os.makedirs(loc)
	downdir= [str(os.path.join(Path.home(), "Downloads"))]
	if "/" in downdir:
		file = loc+"/config.ini"
	else:
		file=loc+"\\config.ini"
	if not os.path.exists(file):
		with open(file, 'w') as f:
			f.write("[download_directory]\n")
			f.write("directory = ")
	config=ConfigParser()
	config.read(file)
	if config.get('download_directory','directory')!="":
		downdir=[config.get('download_directory','directory')]
	resoll=["1080"]
	thread=10
	parser=argparse.ArgumentParser(prog="re-anime",description="GoGoanime Downloader")
	parser.add_argument('-download','-d',dest="download",nargs=1,type=str,help="will download anime")
	parser.add_argument('-ep',dest="ep",nargs=1,type=str,help="mention episode using '-' in between <Number>-<Number> eg: 1-50")
	parser.add_argument('-dir',dest="directory",nargs=1,type=str,help="Download directory",default=downdir)
	parser.add_argument('-res',dest="pixel",nargs=1,type=str,help="Select any of these resolutions [1080/720/480] by default its 1080",default=resoll)
	parser.add_argument('-thread',dest="threads",nargs=1,type=str,help="Threading download")
	parser.add_argument('-changedir',dest="downloaddir",nargs=1,type=str,help="Change default download directory")
	args=parser.parse_args()
	selective=0
	if args.downloaddir:
		temp_dir=down_dir(args.downloaddir[0])
		config.set('download_directory','directory',temp_dir)
		with open(file, 'w') as configfile:
			config.write(configfile)
		exit("The Default download directory has changed to "+temp_dir)

	if args.threads:
		if int(args.threads[0])<1:
			exit("Thread count should be greater than or equal to one")
		else:
			thread=int(args.threads[0])
	if args.pixel:
		if args.pixel[0]=="1080" or args.pixel[0]=="480" or args.pixel[0]=="720":
			resolution_ep=args.pixel[0]
		else:
			exit("Please enter correct resolution [1080|720|480]")
	if args.download:
		flag=validateurl(args.download[0])

		if flag==0:
			#here we cant use re-anime -d "https://gogoanime.tv/naruto-dub-episode-1" -ep 10 
			if args.ep:
				exit("Invalid CLI Command")
		else:
			end_temp=int(server.get(service).episodeno.episodelist(args.download[0]))


		actual_dir=down_dir(args.directory[0])
		
		#cli call will be like re-anime -d <url> -ep 1-12,15 -dir <path>
		if args.ep:
			if args.ep[0].count('-')<1 and args.ep[0].count(',')<1:
				start=int(''.join(args.ep))
				end=int(''.join(args.ep))
			elif args.ep[0].count('-')>1 and args.ep[0].count(',')==0:
				parser.error("Please use this format <Number>-<Number> eg:1-50 or 1-50,60")
			elif args.ep[0].count('-')==1 and args.ep[0].count(',')==0:
				start,end=args.ep[0].split('-')
			elif args.ep[0].count(',')>=1:
				ep_list=list(map(str,args.ep[0].split(',')))
				selective=1
		

		#cli call will be like re-anime -d <url> -dir <path>
		else:
			constraint=[':','>','<','"','*','?','|','/','\\']
			if '/category/' in args.download[0]:
				url=args.download[0]
				ind=url.rfind('/')
				foldername=url[ind+1:]
				for i in constraint:
					foldername=foldername.replace(i,"")
				actual_dir=actual_dir+"/"+foldername
				os.path.normpath(actual_dir)
				if not os.path.exists(actual_dir):
					os.makedirs(actual_dir)
				start=1
				end=end_temp
				server.get(service).downloader.download(args.download[0],int(start),int(end),actual_dir,resolution_ep,thread)
			else:
				url=args.download[0]
				ind=url.rfind('/')
				filename=url[ind:]
				constraint=[':','>','<','"','*','?','|','\\']
				for i in constraint:
					filename=filename.replace(i,"")
				if "episode" not in filename:
					actual_dir=actual_dir+"/"+filename
					os.path.normpath(actual_dir)
					if not os.path.exists(actual_dir):
						os.makedirs(actual_dir)
				server.get(service).downloader.episode_download(args.download[0],filename,actual_dir,resolution_ep,thread)
			exit("Enjoy;)")


		if selective==0:
			if int(start)>end_temp or int(end)>end_temp:
				exit("The Episodes you have mentioned are not available")
			server.get(service).downloader.download(args.download[0],int(start),int(end),actual_dir,resolution_ep,thread)
		else:
			for i in range(len(ep_list)):
				if ep_list[i].count('-')==1:
					start,end=ep_list[i].split('-')
				elif ep_list[i].count('-')>1:
					parser.error("Please use this format <Number>-<Number> eg:1-50 or 1-50,60")
				else:
					start=ep_list[i]
					end=ep_list[i]
				if int(start)>end_temp or int(end)>end_temp:
					exit("The Episodes you have mentioned are not available")
				server.get(service).downloader.download(args.download[0],int(start),int(end),actual_dir,resolution_ep,thread)
		exit("Enjoy;)")


def dir():
	global path
	global downdir
	question=[
		{
			'type': 'input',
			'name': 'downloaddir',
			'message': 'Enter Download Directory path?'
		}
	]
	keyword=prompt(question,style=style)
	temp=keyword.get('downloaddir')
	if temp=="":
		path=downdir[0]
	else:
		path=keyword.get('downloaddir')
		path=os.path.normpath(path)
		if not os.path.exists(path):
			print("Path doesnot exists")
			exit()
	print("Download Directory: "+path)

def start():
	global service
	question = [
	    {
	        'type': 'input',
	        'name': 'anime',
	        'message': 'Anime you wanna search?',
	    }
	]

	keyword = prompt(question, style=style)
	if keyword.get('anime')!="":
		name=keyword.get('anime').replace(" ","-")
		server.get(service).data.get_data(name)

		question = [
		    {
		        'type': 'confirm',
		        'name': 'continue',
		        'message': 'Got the anime you want? if yes enter y or else n to search again ?',
		        'default': True
		    }
		]

		keyword = prompt(question, style=style)
		if keyword.get('continue'):
			return 
		else:
			start()
	else:
		exit()
def validate(ep):
	global episodes
	global service
	episodes=[]
	selective=0
	flag=0
	if ep=='':
		start=1
		end=server.get(service).genre.count
	elif ep.count('-')<1 and ep.count(',')<1:
		start=int(ep)
		end=int(ep)
	elif ep.count('-')>1 and ep.count(',')==0:
		exit("Please use this format <Number>-<Number> eg:1-50 or 1-50,60")
	elif ep.count('-')==1 and ep.count(',')==0:
		start,end=ep.split('-')
	elif ep.count(',')>=1:
		ep_list=list(map(str,ep.split(',')))
		selective=1

	if selective==0:
		if int(start)>server.get(service).genre.count or int(end)>server.get(service).genre.count:
			flag=1
		episodes.append([start,end])
	else:
		for i in range(len(ep_list)):
			if ep_list[i].count('-')==1:
				start,end=ep_list[i].split('-')
			elif ep_list[i].count('-')>1:
				exit("Please use this format <Number>-<Number> eg:1-50 or 1-50,60")
			else:
				start=ep_list[i]
				end=ep_list[i]
			if int(start)>server.get(service).genre.count or int(end)>server.get(service).genre.count:
				flag=1
			episodes.append([start,end])
	return flag


def selectanime():
	global code
	question=[
		{
			'type': 'input',
			'name': 'code',
			'message': 'Select any anime you wanna download through Code Number given in the Table?'
		}
	]
	keyword=prompt(question,style=style)
	code=keyword.get('code')
	if keyword.get('code')=="":
		exit()
	print()
	print('The Anime you have selected is " '+server.get(service).data.animename.get(int(keyword.get("code")))+' "')
	print()
	server.get(service).genre.gen(server.get(service).data.dic.get(int(keyword.get("code"))))
	question=[
		{
			'type': 'confirm',
			'name': 'select',
			'message': 'Please confirm is this the anime you wanna download?',
			'default':True
		}
	]
	keyword=prompt(question,style=style)
	if keyword.get("select"):
		return
	else:
		selectanime()



def epic():
	global episodes
	question=[
		{
			'type': 'input',
			'name': 'episode',
			'message': 'Enter episodes you wanna download from eg:"50-100" or "1,2" or "1-10,20-30" ?'
		}
	]
	keyword=prompt(question,style=style)
	ep=keyword.get('episode')
	flag=validate(ep)
	if flag==1:
		print("The Episodes you have mentioned are not available")
		epic()
	return
def res():
	global resolution
	question=[
		{
		'type' : 'input',
		'name' : 'resol',
		'message' : '1080/720/480'
		}
	]
	keyword=prompt(question,style=style)
	if keyword.get('resol')!="":
		if keyword.get('resol')=="1080" or keyword.get('resol')=="720" or keyword.get('resol')=="480":
			resolution=keyword.get('resol')
		else:
			print("please enter correct resolution")
			res()
	else:
		resolution="1080"

def thrd():
	global thread
	question=[
		{
		'type' : 'input',
		'name' : 'thred',
		'message' : 'Not but least please enter threads //Maximum threads will give you better results'
		}
	]
	keyword=prompt(question,style=style)
	if keyword.get('thred')!="":
		try:
			thread=int(keyword.get('thred'))
			if thread<1:
				print("please enter a positive integer")
				thrd()
		except:
			print("please enter a number 10 will be good")
			thrd()
	else:
		thread=10

def serv():
	global service
	t=PrettyTable(['Code','Domain','Status'])
	try:
		r=requests.get("https://gogoanime.ai")
		stat="Working"
	except:
		try:
			r=requests.get("https://gogoanime.tv")
			stat="Working"
		except:
			stat="Not Working"
	t.add_row(['1','Gogoanime',stat])
	try:
		r=requests.get("https://gogo-play.net")
		stat="Working"
	except:
		stat="Not Working"
	t.add_row(['2','Gogoplay',stat])
	try:
		r=requests.get("https://gogo-stream.com")
		stat="Working"
	except:
		stat="Not Working"
	t.add_row(['3','Gogostream',stat])
	print(t)
	question=[
	{
	'type' : 'input',
	'name' : 'ser',
	'message': 'Select any domain from where you wanna download anime?'
	}]
	f=0
	keyword=prompt(question,style=style)
	if keyword.get("ser")!="":
		try:
			service=int(keyword.get("ser"))
			if service>3 or service<1:
				print("Please enter the code given")	
				f=1
		except:
			print("Please enter the code given")
			f=1
		if f==1:
			serv()
	else:
		exit()
def down():
	global thread
	global service
	global path
	constraint=[':','>','<','"','*','?','|','/','\\']
	foldername=str(server.get(service).data.animename.get(int(code)))
	for i in constraint:
		foldername=foldername.replace(i,"")
	temp=path+"/"+foldername
	dir_path=os.path.normpath(temp)
	if not os.path.exists(dir_path):
		os.makedirs(dir_path)
	url=server.get(service).data.dic.get(int(code))
	for i in range(len(episodes)):
		x,y=episodes[i][0],episodes[i][1]
		server.get(service).downloader.download(url,int(x),int(y),dir_path,resolution,thread)
	exit("Enjoy;)")

f = Figlet(font='slant')
print(f.renderText('Re-Anime'))

style = style_from_dict({
	Token.QuestionMark: '#E91E63 bold',
	Token.Selected: '#673AB7 bold',
	Token.Instruction: '',  # default
	Token.Answer: '#2196f3 bold',
	Token.Question: '',
})
