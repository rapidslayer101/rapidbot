import requests,os
import re
import sys
from bs4 import BeautifulSoup
import threading
from . import downloadmanager

global l_720,l_1080,l_480,storage
def link_1080(url,s):
	global l_1080
	l_1080=None
	for i in url:
		temp=i.find('a')
		if "1080" in temp.text:
			r=s.head(str(temp.get('href')))
			if 'Location' in r.headers and r.headers['Location']!="":
				l_1080=r.headers['Location']

def link_720(url,s):
	global l_720
	l_720=None
	for i in url:
		temp=i.find('a')
		if "720" in temp.text:
			r=s.head(str(temp.get('href')))
			if 'Location' in r.headers and r.headers['Location']!="":
				l_720=r.headers['Location']

def link_480(url,s):
	global l_480
	l_480=None
	for i in url:
		temp=i.find('a')
		if "480" in temp.text:
			r=s.head(str(temp.get('href')))
			if 'Location' in r.headers and r.headers['Location']!="":
				l_480=r.headers['Location']

def hdp(url,s):
	global storage
	storage=None
	for i in url:
		temp=i.find('a')
		if "HDP" in temp.text:
			storage=temp.get('href')
		

def episode_download(url,filename,directory,resl,thread):
	s=requests.Session()
	try:
		r=s.get(url).text
		soup=BeautifulSoup(r,'html.parser').find('div',attrs={'class':'download-anime'}).find('li',attrs={'class':'dowloads'}).find('a').get("href")
	except:
		try:
			r=s.get(url).text
			soup=BeautifulSoup(r,'html.parser').find('div',attrs={'class','favorites_book'}).find('li',attrs={'class','dowloads'}).find('a').get('href')
		except:
			try:
				ind=url.index("-episode")
				camrip=url[:ind]+"-camrip-"+url[ind+1:]
				r=s.get(camrip).text
				soup=BeautifulSoup(r,'html.parser').find('div',attrs={'class':'download-anime'}).find('li',attrs={'class':'dowloads'}).find('a').get("href")
			except:
				ind=url.index("-episode")
				camrip=url[:ind]+"-camrip-"+url[ind+1:]
				r=s.get(camrip).text
				soup=BeautifulSoup(r,'html.parser').find('div',attrs={'class','favorites_book'}).find('li',attrs={'class','dowloads'}).find('a').get('href')
	r=s.get(str(soup)).text
	soup=BeautifulSoup(r,'html.parser')
	link1=soup.find_all('div',attrs={'class':'dowload'})
	t1=threading.Thread(target=link_1080,args=(link1,s,))
	t2=threading.Thread(target=link_720,args=(link1,s,))
	t3=threading.Thread(target=link_480,args=(link1,s,))
	t4=threading.Thread(target=hdp,args=(link1,s,))
	t1.start()
	t2.start()
	t3.start()
	t4.start()
	t1.join()
	t2.join()
	t3.join()
	t4.join()
	if resl=="1080":
		if storage!=None:
			downloadmanager.idmm(storage,filename,directory,thread)
		else:
			if l_1080!=None:
				downloadmanager.idmm(l_1080,filename,directory,thread)
			else:
				if l_720!=None:
					downloadmanager.idmm(l_720,filename,directory,thread)
				else:
					if l_480!=None:
						downloadmanager.idmm(l_480,filename,directory,thread)
					else:
						print("Not available")

	elif resl=="720":
		if l_720!=None:
			downloadmanager.idmm(l_720,filename,directory,thread)
		else:
			if l_480!=None:
				downloadmanager.idmm(l_480,filename,directory,thread)
			else:
				if l_1080!=None:
					downloadmanager.idmm(l_1080,filename,directory,thread)
				else:
					if storage!=None:
						downloadmanager.idmm(storage,filename,directory,thread)
					else:
						print("not available")

	elif resl=="480":
		if l_480!=None:
			downloadmanager.idmm(l_480,filename,directory,thread)
		else:
			if l_720!=None:
				downloadmanager.idmm(l_720,filename,directory,thread)
			else:
				if l_1080!=None:
					downloadmanager.idmm(l_1080,filename,directory,thread)
				else:
					if storage!=None:
						downloadmanager.idmm(storage,filename,directory,thread)
					else:
						print("not available")

def download(url,start,end,down_dir,resolution,thread):
	for i in range(start,end+1):
		ind=url.rfind('/')
		file_name=url[ind:]+"-episode-"+str(i)
		try:	
			temp_url="https://gogoanime.ai"
			r=requests.head(temp_url)
			originalurl=r.headers['Location']
		except:
			temp_url="https://gogoanime.tv"
			r=requests.head(temp_url)
			originalurl=r.headers['Location']
		req_url=originalurl+file_name
		constraint=[':','>','<','"','*','?','|','\\']
		for i in constraint:
			file_name=file_name.replace(i,"")
		episode_download(req_url,file_name,down_dir,resolution,thread)

